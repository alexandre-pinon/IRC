[{"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\index.js":"1","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\App.js":"2","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Auth\\Login.js":"3","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Auth\\Register.js":"4","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\ColorPanel\\ColorPanel.js":"5","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Messages.js":"6","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\SidePanel.js":"7","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\MetaPanel\\MetaPanel.js":"8","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Message.js":"9","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\MessageForm.js":"10","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Typing.js":"11","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\MessagesHeader.js":"12","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\Channels.js":"13","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\UserPanel.js":"14","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\DirectMessages.js":"15","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\Starred.js":"16","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\FileModal.js":"17","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Toaster.js":"18"},{"size":773,"mtime":1610898803730,"results":"19","hashOfConfig":"20"},{"size":1842,"mtime":1611071139432,"results":"21","hashOfConfig":"20"},{"size":3733,"mtime":1610960365313,"results":"22","hashOfConfig":"20"},{"size":5873,"mtime":1610963612230,"results":"23","hashOfConfig":"20"},{"size":3506,"mtime":1610895691750,"results":"24","hashOfConfig":"20"},{"size":2703,"mtime":1611064028074,"results":"25","hashOfConfig":"20"},{"size":975,"mtime":1611071155881,"results":"26","hashOfConfig":"20"},{"size":344,"mtime":1610895722808,"results":"27","hashOfConfig":"20"},{"size":2397,"mtime":1610895701853,"results":"28","hashOfConfig":"20"},{"size":4594,"mtime":1611064699514,"results":"29","hashOfConfig":"20"},{"size":256,"mtime":1610895719572,"results":"30","hashOfConfig":"20"},{"size":1217,"mtime":1610895716627,"results":"31","hashOfConfig":"20"},{"size":5038,"mtime":1611074180838,"results":"32","hashOfConfig":"20"},{"size":5879,"mtime":1610983837251,"results":"33","hashOfConfig":"20"},{"size":2719,"mtime":1610895728811,"results":"34","hashOfConfig":"20"},{"size":600,"mtime":1610895735846,"results":"35","hashOfConfig":"20"},{"size":1240,"mtime":1610895698325,"results":"36","hashOfConfig":"20"},{"size":490,"mtime":1610898266649,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1210o1f",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\index.js",[],["80","81"],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\App.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Auth\\Login.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Auth\\Register.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\ColorPanel\\ColorPanel.js",["82","83","84","85","86"],"import React from 'react'\r\nimport { Sidebar, Menu, Divider, Button, Modal, Label, Icon, Segment } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { SliderPicker, TwitterPicker, GithubPicker } from 'react-color'\r\n\r\nclass ColorPanel extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        primary: '',\r\n        secondary: ''\r\n    }\r\n\r\n    handleChangePrimary = color => this.setState({ primary: color.hex })\r\n\r\n    handleChangeSecondary = color => this.setState({ secondary: color.hex })\r\n\r\n    \r\n    displayUserColors = colors => (\r\n        colors.length > 0 && colors.map((color, i) => (\r\n            <React.Fragment key={i}>\r\n                <Divider />\r\n                <div \r\n                    className='color__container'\r\n                    onClick={() => this.props.setColors(color.primary, color.secondary)}\r\n                >\r\n                    <div className='color__square' style={{ background: color.primary}}>\r\n                        <div className='color__overlay' style={{ background: color.secondary}}>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        ))\r\n    )\r\n    \r\n    openModal = () => this.setState({ modal: true })\r\n\r\n    closeModal = () => this.setState({ modal: false })\r\n\r\n\r\n    render() {\r\n        const { modal, primary, secondary } = this.state\r\n        return (\r\n            <Sidebar\r\n                as={Menu}\r\n                icon='labeled'\r\n                inverted\r\n                vertical\r\n                visible\r\n                width='very thin'\r\n            >\r\n                <Divider />\r\n                <Button icon='add' size='medium' color='blue' onClick={this.openModal} />\r\n                <Divider />\r\n                <a href='https://www.youtube.com/' target='_blank'>\r\n                    <Button icon='youtube' size='medium' color='red' />\r\n                </a>\r\n                <Divider />\r\n                <a href='https://lichess.org/' target='_blank' >\r\n                    <Button icon='chess' size='medium' color='brown' />\r\n                </a>\r\n                \r\n\r\n                {/* Color Picker Modal */}\r\n                <Modal basic open={modal} onClose={this.closeModal}>\r\n                    <Modal.Header>Choose App Colors</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Segment inverted>\r\n                        <Label content='Primary Color' />\r\n                        <TwitterPicker\r\n                            color={primary}\r\n                            onChange={this.handleChangePrimary} />\r\n                        </Segment>\r\n\r\n                        <Segment inverted>\r\n                        <Label content='Secondary Color' />\r\n                        <TwitterPicker\r\n                            color={secondary}\r\n                            onChange={this.handleChangeSecondary}/>\r\n                        </Segment>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n\r\n                        <Button color='green' inverted>\r\n                            <Icon name='checkmark' /> Save Colors\r\n                        </Button>\r\n\r\n                        <Button color='red' inverted onClick={this.closeModal}>\r\n                            <Icon name='remove' /> Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Sidebar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPanel","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Messages.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\SidePanel.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\MetaPanel\\MetaPanel.js",["87","88"],"import React from 'react'\r\nimport { Segment, Accordion, Header, Icon } from 'semantic-ui-react'\r\n\r\n\r\nclass MetaPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' attached='top'>\r\n          About # Genshin Impact\r\n        </Header>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MetaPanel\r\n","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Message.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\MessageForm.js",["89","90"],"import React from 'react'\r\nimport FileModal from './FileModal'\r\nimport { Segment, Button, Input } from 'semantic-ui-react'\r\nimport { Picker, emojiIndex } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\n\r\nclass Messageform extends React.Component {\r\n    state = {\r\n        newMessage: '',\r\n        sending: false,\r\n        errors: [],\r\n        modal: false,\r\n        emojiPicker: false\r\n    }\r\n\r\n    sendMessage = (message) => {\r\n        if (this.props.socket) {\r\n            this.props.socket.emit('chatroomMessage', {\r\n                chatroomId: this.props.activeChannel._id,\r\n                message: message\r\n            })\r\n            this.setState({ sending: false })\r\n        } else {\r\n            console.log('Error : NO SOCKET!')\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // console.log({ prevState, state: this.state })\r\n        // console.log(this.state.sending)\r\n        // console.log(prevState.newMessage !== this.state.newMessage)\r\n        if (this.state.sending && prevState.newMessage !== this.state.newMessage) {\r\n            console.log(this.props.socket)\r\n            if (this.props.socket) {\r\n                this.props.socket.on('newMessage', (message) => {\r\n                    console.log(message)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const message = this.state.newMessage\r\n        this.setState({ sending: true, newMessage: '' }, () => this.sendMessage(message))\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n      }\r\n\r\n    handleTogglePicker = () => {\r\n        this.setState({ emojiPicker: !this.state.emojiPicker })\r\n    }\r\n\r\n    handleAddEmoji = emoji => {\r\n        const oldMessage = this.state.newMessage\r\n        const newMessage = this.colonToUnicode(` ${oldMessage} ${emoji.colons} `)\r\n        this.setState({ newMessage: newMessage, emojiPicker: false })\r\n      }\r\n    \r\n      colonToUnicode = newMessage => {\r\n        return newMessage.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n          x = x.replace(/:/g, '')\r\n          let emoji = emojiIndex.emojis[x]\r\n          if (typeof emoji !== 'undefined') {\r\n            let unicode = emoji.native\r\n            if (typeof unicode !== 'undefined') {\r\n              return unicode\r\n            }\r\n          }\r\n          x = ':' + x + ':'\r\n          return x\r\n        })\r\n      }\r\n\r\n    openModal = () => this.setState({ modal: true })\r\n\r\n    closeModal = () => this.setState({ modal: false })\r\n\r\n    render() {\r\n\r\n        const { errors, newMessage, sending, modal, emojiPicker } = this.state\r\n\r\n        return (\r\n            <Segment className='message__form'>\r\n                {emojiPicker && (\r\n                    <Picker\r\n                        set='apple'\r\n                        onSelect={this.handleAddEmoji}\r\n                        className='emojipicker'\r\n                        title='Pick your emoji'\r\n                        emoji='point_up'\r\n                    />\r\n                )}\r\n                <Input\r\n                    fluid\r\n                    name='newMessage'\r\n                    onChange={this.handleChange}\r\n                    style={{ marginBottom: '0.7em' }}\r\n                    value={newMessage}\r\n                    label={\r\n                    <Button\r\n                        icon={emojiPicker ? 'close' : 'add'}\r\n                        content={emojiPicker ? 'Close' : null}\r\n                        onClick={this.handleTogglePicker}\r\n                    />\r\n                    }                    \r\n                    labelPosition='left'\r\n                    placeholder='Write your message'\r\n                />\r\n\r\n                <Button.Group icon widths='2'>\r\n                    <Button\r\n                        color='yellow'\r\n                        onClick={this.handleSubmit}\r\n                        content='Send'\r\n                        labelPosition='left'\r\n                        icon='edit'\r\n                    />\r\n                    <Button\r\n                        color='blue'\r\n                        onClick={this.openModal}\r\n                        content='Upload Media'\r\n                        labelPosition='right'\r\n                        icon='cloud upload'\r\n                    />\r\n                    <FileModal\r\n                        modal={modal}\r\n                        closeModal={this.closeModal}\r\n                    />\r\n                </Button.Group>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Messageform","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\Typing.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\MessagesHeader.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\Channels.js",["91","92"],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\UserPanel.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\DirectMessages.js",["93"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nclass DirectMessages extends React.Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Menu.Menu className='menu'>\r\n                    <Menu.Item>\r\n                        <span>\r\n                            <Icon name='mail' /> DIRECT MESSAGES\r\n                        </span> {' '}\r\n                    </Menu.Item>\r\n                    {/* Users to Send Direct Messages */}\r\n\r\n                    \r\n                    {/*users.map(user => (\r\n                        <Menu.Item\r\n                            key={user.uid}\r\n                            onClick={() => console.log(user)}\r\n                            style={{ opacity: 0.7, fontStyle: 'italic' }}\r\n                        >\r\n                            <Icon\r\n                                name='circle'\r\n                                color={this.isUserOnline(user) ? 'green' : 'red'}\r\n                            />\r\n                            @ {user.name}\r\n                        </Menu.Item>\r\n                    ))*/}\r\n\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'red'}\r\n                        />\r\n                        @ {'Keisay'}\r\n                    </Menu.Item>\r\n                    \r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'green'}\r\n                        />\r\n                        @ {'Wilfrère'}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'red'}\r\n                        />\r\n                        @ {'BryanCurry'}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'green'}\r\n                        />\r\n                        @ {'UmaSimp'}\r\n                    </Menu.Item>\r\n                    \r\n                </Menu.Menu>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DirectMessages","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\SidePanel\\Starred.js",["94"],"import React from 'react'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nclass Starred extends React.Component {\r\n    state = {\r\n        starredChannels: [],\r\n    }\r\n\r\n    render() {\r\n        const { starredChannels, modal } = this.state\r\n        return (\r\n            <Menu.Menu className='menu'>\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name='star' /> STARRED\r\n                    </span> {' '}\r\n                    ({ starredChannels.length })\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Starred","C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Messages\\FileModal.js",[],"C:\\Epitech\\IRCjavascript\\FrontendBranch\\src\\components\\Toaster.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":22},{"ruleId":"99","severity":1,"message":"104","line":4,"column":39,"nodeType":"101","messageId":"102","endLine":4,"endColumn":51},{"ruleId":"105","severity":1,"message":"106","line":54,"column":17,"nodeType":"107","endLine":54,"endColumn":68},{"ruleId":"105","severity":1,"message":"106","line":58,"column":17,"nodeType":"107","endLine":58,"endColumn":65},{"ruleId":"99","severity":1,"message":"108","line":2,"column":19,"nodeType":"101","messageId":"102","endLine":2,"endColumn":28},{"ruleId":"99","severity":1,"message":"109","line":2,"column":38,"nodeType":"101","messageId":"102","endLine":2,"endColumn":42},{"ruleId":"99","severity":1,"message":"110","line":83,"column":17,"nodeType":"101","messageId":"102","endLine":83,"endColumn":23},{"ruleId":"99","severity":1,"message":"111","line":83,"column":37,"nodeType":"101","messageId":"102","endLine":83,"endColumn":44},{"ruleId":"99","severity":1,"message":"112","line":2,"column":17,"nodeType":"101","messageId":"102","endLine":2,"endColumn":27},{"ruleId":"99","severity":1,"message":"113","line":3,"column":50,"nodeType":"101","messageId":"102","endLine":3,"endColumn":55},{"ruleId":"99","severity":1,"message":"114","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":19},{"ruleId":"99","severity":1,"message":"115","line":10,"column":34,"nodeType":"101","messageId":"102","endLine":10,"endColumn":39},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'SliderPicker' is defined but never used.","'GithubPicker' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Accordion' is defined but never used.","'Icon' is defined but never used.","'errors' is assigned a value but never used.","'sending' is assigned a value but never used.","'useReducer' is defined but never used.","'Label' is defined but never used.","'useParams' is defined but never used.","'modal' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]