[{"C:\\Epitech\\IRCjavascript\\Client\\src\\index.js":"1","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\App.js":"2","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Auth\\Login.js":"3","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Auth\\Register.js":"4","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Toaster.js":"5","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\MetaPanel\\MetaPanel.js":"6","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\ColorPanel\\ColorPanel.js":"7","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Messages.js":"8","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\SidePanel.js":"9","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Typing.js":"10","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\Starred.js":"11","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Message.js":"12","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\MessageForm.js":"13","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\MessagesHeader.js":"14","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\UserPanel.js":"15","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\DirectMessages.js":"16","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\Channels.js":"17","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\FileModal.js":"18"},{"size":773,"mtime":1610898803730,"results":"19","hashOfConfig":"20"},{"size":1845,"mtime":1611571290700,"results":"21","hashOfConfig":"20"},{"size":3834,"mtime":1611561864780,"results":"22","hashOfConfig":"20"},{"size":5724,"mtime":1611563416618,"results":"23","hashOfConfig":"20"},{"size":490,"mtime":1610898266649,"results":"24","hashOfConfig":"20"},{"size":344,"mtime":1610895722808,"results":"25","hashOfConfig":"20"},{"size":3506,"mtime":1610895691750,"results":"26","hashOfConfig":"20"},{"size":3960,"mtime":1611572385922,"results":"27","hashOfConfig":"20"},{"size":1023,"mtime":1611571348088,"results":"28","hashOfConfig":"20"},{"size":256,"mtime":1610895719572,"results":"29","hashOfConfig":"20"},{"size":600,"mtime":1610895735846,"results":"30","hashOfConfig":"20"},{"size":2378,"mtime":1611508573704,"results":"31","hashOfConfig":"20"},{"size":4496,"mtime":1611513015019,"results":"32","hashOfConfig":"20"},{"size":1454,"mtime":1611569299705,"results":"33","hashOfConfig":"20"},{"size":5987,"mtime":1611577797043,"results":"34","hashOfConfig":"20"},{"size":2719,"mtime":1610895728811,"results":"35","hashOfConfig":"20"},{"size":6368,"mtime":1611568090313,"results":"36","hashOfConfig":"20"},{"size":1240,"mtime":1610895698325,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1nf8piz",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Epitech\\IRCjavascript\\Client\\src\\index.js",[],["83","84"],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\App.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Auth\\Login.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Auth\\Register.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Toaster.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\MetaPanel\\MetaPanel.js",["85","86"],"import React from 'react'\r\nimport { Segment, Accordion, Header, Icon } from 'semantic-ui-react'\r\n\r\n\r\nclass MetaPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Header as='h3' attached='top'>\r\n          About # Genshin Impact\r\n        </Header>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MetaPanel\r\n","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\ColorPanel\\ColorPanel.js",["87","88","89","90","91"],"import React from 'react'\r\nimport { Sidebar, Menu, Divider, Button, Modal, Label, Icon, Segment } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { SliderPicker, TwitterPicker, GithubPicker } from 'react-color'\r\n\r\nclass ColorPanel extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        primary: '',\r\n        secondary: ''\r\n    }\r\n\r\n    handleChangePrimary = color => this.setState({ primary: color.hex })\r\n\r\n    handleChangeSecondary = color => this.setState({ secondary: color.hex })\r\n\r\n    \r\n    displayUserColors = colors => (\r\n        colors.length > 0 && colors.map((color, i) => (\r\n            <React.Fragment key={i}>\r\n                <Divider />\r\n                <div \r\n                    className='color__container'\r\n                    onClick={() => this.props.setColors(color.primary, color.secondary)}\r\n                >\r\n                    <div className='color__square' style={{ background: color.primary}}>\r\n                        <div className='color__overlay' style={{ background: color.secondary}}>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        ))\r\n    )\r\n    \r\n    openModal = () => this.setState({ modal: true })\r\n\r\n    closeModal = () => this.setState({ modal: false })\r\n\r\n\r\n    render() {\r\n        const { modal, primary, secondary } = this.state\r\n        return (\r\n            <Sidebar\r\n                as={Menu}\r\n                icon='labeled'\r\n                inverted\r\n                vertical\r\n                visible\r\n                width='very thin'\r\n            >\r\n                <Divider />\r\n                <Button icon='add' size='medium' color='blue' onClick={this.openModal} />\r\n                <Divider />\r\n                <a href='https://www.youtube.com/' target='_blank'>\r\n                    <Button icon='youtube' size='medium' color='red' />\r\n                </a>\r\n                <Divider />\r\n                <a href='https://lichess.org/' target='_blank' >\r\n                    <Button icon='chess' size='medium' color='brown' />\r\n                </a>\r\n                \r\n\r\n                {/* Color Picker Modal */}\r\n                <Modal basic open={modal} onClose={this.closeModal}>\r\n                    <Modal.Header>Choose App Colors</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Segment inverted>\r\n                        <Label content='Primary Color' />\r\n                        <TwitterPicker\r\n                            color={primary}\r\n                            onChange={this.handleChangePrimary} />\r\n                        </Segment>\r\n\r\n                        <Segment inverted>\r\n                        <Label content='Secondary Color' />\r\n                        <TwitterPicker\r\n                            color={secondary}\r\n                            onChange={this.handleChangeSecondary}/>\r\n                        </Segment>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n\r\n                        <Button color='green' inverted>\r\n                            <Icon name='checkmark' /> Save Colors\r\n                        </Button>\r\n\r\n                        <Button color='red' inverted onClick={this.closeModal}>\r\n                            <Icon name='remove' /> Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Sidebar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPanel","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Messages.js",["92"],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\SidePanel.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Typing.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\Starred.js",["93"],"import React from 'react'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nclass Starred extends React.Component {\r\n    state = {\r\n        starredChannels: [],\r\n    }\r\n\r\n    render() {\r\n        const { starredChannels, modal } = this.state\r\n        return (\r\n            <Menu.Menu className='menu'>\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name='star' /> STARRED\r\n                    </span> {' '}\r\n                    ({ starredChannels.length })\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Starred","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\Message.js",["94"],"import React from 'react'\r\nimport { Comment, Image } from 'semantic-ui-react'\r\n\r\n/*\r\nconst isOwnMessage = (message, user) => {\r\n    return message.user.id === user.uid ? 'message__self' : ''\r\n}\r\n*/\r\n\r\n\r\n/*\r\nconst timeFromNow = timestamp => moment(timestamp).fromNow()\r\n*/ \r\n\r\nconst Message = ({ message, username }) => (\r\n    <Comment>\r\n        <Comment.Avatar src={'https://avatarfiles.alphacoders.com/259/thumb-1920-259754.png'} />\r\n        <Comment.Content className='message__self'>\r\n            <Comment.Author as='a'>{username}</Comment.Author>\r\n            <Comment.Text>{message}</Comment.Text>\r\n        </Comment.Content>\r\n\r\n        {/* <Comment.Avatar src={'https://avatarfiles.alphacoders.com/228/228327.jpg'} />\r\n        <Comment.Content className='message__self'>\r\n            <Comment.Author as='a'>{'Keisay'}</Comment.Author>\r\n            <Comment.Text>{'That\\'s cool bro, I prefer to play The Last Of Us, the story is better!'}</Comment.Text>\r\n        </Comment.Content>\r\n\r\n        <Comment.Avatar src={'https://i1.sndcdn.com/avatars-000343843765-qob6an-t500x500.jpg'} />\r\n        <Comment.Content className='message__self'>\r\n            <Comment.Author as='a'>{'Wilfrère'}</Comment.Author>\r\n            <Comment.Text>{'.'}</Comment.Text>\r\n        </Comment.Content>\r\n\r\n        <Comment.Avatar src={'https://manderson.site/yote/img/curry.jpg'} />\r\n        <Comment.Content className='message__self'>\r\n            <Comment.Author as='a'>{'BryanCurry'}</Comment.Author>\r\n            <Comment.Text>{'Gotaga is the King of Twitch!'}</Comment.Text>\r\n        </Comment.Content>\r\n\r\n        <Comment.Avatar src={'https://avatarfiles.alphacoders.com/807/80701.jpg'} />\r\n        <Comment.Content className='message__self'>\r\n            <Comment.Author as='a'>{'UmaSimp'}</Comment.Author>\r\n            <Comment.Text>{'Hey guys, check this streamer!'}</Comment.Text>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <Image src={'https://pbs.twimg.com/media/Elh-MiTVcAAy3l2.jpg'} className='message__image' />\r\n        </Comment.Content> */}\r\n\r\n    </Comment>\r\n)\r\n\r\nexport default Message","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\MessageForm.js",["95"],"import React from 'react'\r\nimport FileModal from './FileModal'\r\nimport { Segment, Button, Input } from 'semantic-ui-react'\r\nimport { Picker, emojiIndex } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\n\r\nclass Messageform extends React.Component {\r\n    state = {\r\n        newMessage: '',\r\n        errors: [],\r\n        modal: false,\r\n        emojiPicker: false\r\n    }\r\n\r\n    sendMessage = () => {\r\n        if (this.props.socket) {\r\n            this.props.socket.emit('chatroomMessage', {\r\n                chatroomId: this.props.activeChannel._id,\r\n                message: this.state.newMessage\r\n            })\r\n            this.setState({ newMessage: '' })\r\n        } else {\r\n            console.log('Error : NO SOCKET!')\r\n        }\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState) {\r\n    //     // console.log({ prevState, state: this.state })\r\n    //     // console.log(this.state.sending)\r\n    //     // console.log(prevState.newMessage !== this.state.newMessage)\r\n    //     if (this.state.sending && prevState.newMessage !== this.state.newMessage) {\r\n    //         console.log(this.props.socket)\r\n    //         if (this.props.socket) {\r\n    //             this.props.socket.on('newMessage', (message) => {\r\n    //                 console.log(message)\r\n    //             })\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.sendMessage()\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n      }\r\n\r\n    handleTogglePicker = () => {\r\n        this.setState({ emojiPicker: !this.state.emojiPicker })\r\n    }\r\n\r\n    handleAddEmoji = emoji => {\r\n        const oldMessage = this.state.newMessage\r\n        const newMessage = this.colonToUnicode(` ${oldMessage} ${emoji.colons} `)\r\n        this.setState({ newMessage: newMessage, emojiPicker: false })\r\n      }\r\n    \r\n      colonToUnicode = newMessage => {\r\n        return newMessage.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n          x = x.replace(/:/g, '')\r\n          let emoji = emojiIndex.emojis[x]\r\n          if (typeof emoji !== 'undefined') {\r\n            let unicode = emoji.native\r\n            if (typeof unicode !== 'undefined') {\r\n              return unicode\r\n            }\r\n          }\r\n          x = ':' + x + ':'\r\n          return x\r\n        })\r\n      }\r\n\r\n    openModal = () => this.setState({ modal: true })\r\n\r\n    closeModal = () => this.setState({ modal: false })\r\n\r\n    render() {\r\n\r\n        const { newMessage, errors, modal, emojiPicker } = this.state\r\n\r\n        return (\r\n            <Segment className='message__form'>\r\n                {emojiPicker && (\r\n                    <Picker\r\n                        set='apple'\r\n                        onSelect={this.handleAddEmoji}\r\n                        className='emojipicker'\r\n                        title='Pick your emoji'\r\n                        emoji='point_up'\r\n                    />\r\n                )}\r\n                <Input\r\n                    fluid\r\n                    name='newMessage'\r\n                    onChange={this.handleChange}\r\n                    style={{ marginBottom: '0.7em' }}\r\n                    value={newMessage}\r\n                    label={\r\n                    <Button\r\n                        icon={emojiPicker ? 'close' : 'add'}\r\n                        content={emojiPicker ? 'Close' : null}\r\n                        onClick={this.handleTogglePicker}\r\n                    />\r\n                    }                    \r\n                    labelPosition='left'\r\n                    placeholder='Write your message'\r\n                />\r\n\r\n                <Button.Group icon widths='2'>\r\n                    <Button\r\n                        color='yellow'\r\n                        onClick={this.handleSubmit}\r\n                        content='Send'\r\n                        labelPosition='left'\r\n                        icon='edit'\r\n                    />\r\n                    <Button\r\n                        color='blue'\r\n                        onClick={this.openModal}\r\n                        content='Upload Media'\r\n                        labelPosition='right'\r\n                        icon='cloud upload'\r\n                    />\r\n                    <FileModal\r\n                        modal={modal}\r\n                        closeModal={this.closeModal}\r\n                    />\r\n                </Button.Group>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Messageform","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\MessagesHeader.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\UserPanel.js",[],"C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\DirectMessages.js",["96"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\n\r\nclass DirectMessages extends React.Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Menu.Menu className='menu'>\r\n                    <Menu.Item>\r\n                        <span>\r\n                            <Icon name='mail' /> DIRECT MESSAGES\r\n                        </span> {' '}\r\n                    </Menu.Item>\r\n                    {/* Users to Send Direct Messages */}\r\n\r\n                    \r\n                    {/*users.map(user => (\r\n                        <Menu.Item\r\n                            key={user.uid}\r\n                            onClick={() => console.log(user)}\r\n                            style={{ opacity: 0.7, fontStyle: 'italic' }}\r\n                        >\r\n                            <Icon\r\n                                name='circle'\r\n                                color={this.isUserOnline(user) ? 'green' : 'red'}\r\n                            />\r\n                            @ {user.name}\r\n                        </Menu.Item>\r\n                    ))*/}\r\n\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'red'}\r\n                        />\r\n                        @ {'Keisay'}\r\n                    </Menu.Item>\r\n                    \r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'green'}\r\n                        />\r\n                        @ {'Wilfrère'}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'red'}\r\n                        />\r\n                        @ {'BryanCurry'}\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item\r\n                        style={{ opacity: 1.0, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name='circle'\r\n                            color={'green'}\r\n                        />\r\n                        @ {'UmaSimp'}\r\n                    </Menu.Item>\r\n                    \r\n                </Menu.Menu>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DirectMessages","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\SidePanel\\Channels.js",["97","98"],"import axios from 'axios'\r\nimport React, { useReducer } from 'react'\r\nimport { Menu, Icon, Modal, Form, Input, Button, Label } from 'semantic-ui-react'\r\nimport makeToast from '../Toaster'\r\n\r\nclass Channels extends React.Component {\r\n    state = {\r\n        channels: [],\r\n        channelName: '',\r\n        activeChannel: null,\r\n        modal: false\r\n    }\r\n\r\n    getUserChannels = async () => {\r\n        try {\r\n            const token = sessionStorage.getItem('CC_Token')\r\n            const payload = token ? JSON.parse(atob(token.split('.')[1])) : null\r\n            const headers = { Authorization: `Bearer ${token}` }\r\n            const response = await axios.get(\r\n                'http://localhost:8000/chatroom/' + payload?.id,\r\n                { headers: headers }\r\n            )\r\n            if (response.data.length > 0) {\r\n                const defaultActiveChannel = response.data[0]\r\n                this.props.callBackActivateChannel(defaultActiveChannel)\r\n                this.setState({\r\n                    channels: response.data,\r\n                    activeChannel: defaultActiveChannel\r\n                }, () => {\r\n                    if (this.props.socket) {\r\n                        this.props.socket.emit('joinRoom', {\r\n                            chatroomId: this.state.activeChannel._id\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            // setTimeout(this.getUserChannels, 3000)\r\n            console.log('Error retrieving Channels!', error)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserChannels()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            this.props.socket &&\r\n            prevState.activeChannel &&\r\n            prevState.activeChannel._id !== this.state.activeChannel._id\r\n        ) {\r\n            this.props.socket.emit('leaveRoom', {\r\n                chatroomId: prevState.activeChannel._id\r\n            })\r\n            this.props.socket.emit('joinRoom', {\r\n                chatroomId: this.state.activeChannel._id\r\n            })\r\n        }\r\n    }\r\n\r\n    addChannel = async () => {\r\n        console.log(this.state.channelName)\r\n        try {\r\n            const token = sessionStorage.getItem('CC_Token')\r\n            const payload = token ? JSON.parse(atob(token.split('.')[1])) : null\r\n            const data = {\r\n                name: this.state.channelName,\r\n                userId: payload.id\r\n            }\r\n            const headers = { Authorization: `Bearer ${token}` }\r\n            const response = await axios.post(\r\n                'http://localhost:8000/chatroom/create',\r\n                data,\r\n                { headers: headers }\r\n            )\r\n            makeToast('success', response.data.message)\r\n            this.getUserChannels()\r\n        } catch (error) {\r\n            if (error.response?.data?.message) {\r\n                makeToast('error', error.response.data.message)\r\n            } else {\r\n                makeToast('error', 'Internal Server Error')\r\n                console.log(error)\r\n            }\r\n        }\r\n        this.closeModal()\r\n    }\r\n\r\n    isFormValid = () => this.state.channelName.trim() ? true : false\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        this.isFormValid()\r\n            ? this.addChannel()\r\n            : makeToast('error', 'Channel name is empty!')\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    activateChannel = channel => {\r\n        this.props.callBackActivateChannel(channel)\r\n        this.setState({ activeChannel: channel })\r\n    }\r\n\r\n    openModal = () => this.setState({ modal: true })\r\n\r\n    closeModal = () => {\r\n        this.setState({ modal: false, channelName: '' })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { channels, modal } = this.state\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Menu.Menu style={{ paddingBottom: '2em' }}>\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name='exchange' /> CHANNELS\r\n                    </span> {' '}\r\n                    ({ channels ? channels.length : 0 })\r\n                    <Icon name='add' onClick={this.openModal} />\r\n                </Menu.Item>\r\n                {/* Channels */}\r\n                {/* this.displayChannels(channels) */}\r\n\r\n                {/* Example Channel 1 */}\r\n                { channels ? channels.map(channel => (\r\n                <Menu.Item\r\n                    key={channel._id}\r\n                    onClick={() => this.activateChannel(channel)}\r\n                    style={{ opacity: 1.0 }}\r\n                >\r\n                    {channel.name}\r\n                </Menu.Item>\r\n                )) : ''}\r\n            </Menu.Menu>\r\n\r\n            {/* Add Channel Modal */}\r\n            <Modal basic open={modal} onClose={this.closeModal}>\r\n                <Modal.Header>Add a Channel</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n\r\n                        <Form.Field>\r\n                            <Input\r\n                                fluid\r\n                                label='Name of Channel'\r\n                                name='channelName'\r\n                                onChange={this.handleChange} \r\n                            />\r\n                        </Form.Field>\r\n\r\n                        {/* <Form.Field>\r\n                            <Input\r\n                                fluid\r\n                                label='About the Channel'\r\n                                name='channelDetails'\r\n                                onChange={this.handleChange} \r\n                            />\r\n                        </Form.Field> */}\r\n\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n\r\n                    <Button color='green' inverted onClick={this.handleSubmit}>\r\n                        <Icon name='checkmark' /> Add\r\n                    </Button>\r\n\r\n                    <Button color='red' inverted onClick={this.closeModal}>\r\n                        <Icon name='remove' /> Cancel\r\n                    </Button>\r\n\r\n                </Modal.Actions>\r\n            </Modal>\r\n            </React.Fragment>\r\n    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Channels","C:\\Epitech\\IRCjavascript\\Client\\src\\components\\Messages\\FileModal.js",[],["99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":19,"nodeType":"107","messageId":"108","endLine":2,"endColumn":28},{"ruleId":"105","severity":1,"message":"109","line":2,"column":38,"nodeType":"107","messageId":"108","endLine":2,"endColumn":42},{"ruleId":"105","severity":1,"message":"110","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"105","severity":1,"message":"111","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":22},{"ruleId":"105","severity":1,"message":"112","line":4,"column":39,"nodeType":"107","messageId":"108","endLine":4,"endColumn":51},{"ruleId":"113","severity":1,"message":"114","line":54,"column":17,"nodeType":"115","endLine":54,"endColumn":68},{"ruleId":"113","severity":1,"message":"114","line":58,"column":17,"nodeType":"115","endLine":58,"endColumn":65},{"ruleId":"105","severity":1,"message":"116","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":14},{"ruleId":"105","severity":1,"message":"117","line":10,"column":34,"nodeType":"107","messageId":"108","endLine":10,"endColumn":39},{"ruleId":"105","severity":1,"message":"118","line":2,"column":19,"nodeType":"107","messageId":"108","endLine":2,"endColumn":24},{"ruleId":"105","severity":1,"message":"119","line":81,"column":29,"nodeType":"107","messageId":"108","endLine":81,"endColumn":35},{"ruleId":"105","severity":1,"message":"120","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":19},{"ruleId":"105","severity":1,"message":"121","line":2,"column":17,"nodeType":"107","messageId":"108","endLine":2,"endColumn":27},{"ruleId":"105","severity":1,"message":"122","line":3,"column":50,"nodeType":"107","messageId":"108","endLine":3,"endColumn":55},{"ruleId":"101","replacedBy":"123"},{"ruleId":"103","replacedBy":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'Accordion' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'Link' is defined but never used.","'SliderPicker' is defined but never used.","'GithubPicker' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Typing' is defined but never used.","'modal' is assigned a value but never used.","'Image' is defined but never used.","'errors' is assigned a value but never used.","'useParams' is defined but never used.","'useReducer' is defined but never used.","'Label' is defined but never used.",["125"],["126"],"no-global-assign","no-unsafe-negation"]